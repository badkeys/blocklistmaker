#!/usr/bin/python3

import os
import argparse
import hashlib
import shutil

import cryptography
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, dsa, ec, dh
from cryptography.hazmat.primitives.asymmetric import ed25519, x25519, x448, ed448
from cryptography.hazmat import backends


def hashnumber(i):
    i_bin = i.to_bytes((i.bit_length() + 7) // 8, byteorder="big")
    s256 = hashlib.sha256(i_bin).hexdigest()[:30]
    return s256


def writehash(id, hash, path, fileshort, filelong):
    fileshort.write(f"{hash}{id:02x}\n")
    lhash = hash[0:16]
    filelong.write(f"{lhash};{path}\n")


def dummy(_a, _b):
    return 1


# Disabling RSA checks, otherwise parsing takes forever
mybackend = backends.default_backend()
mybackend._rsa_skip_check_key = True

# Replace slow RSA_blinding_on with dummy function
mybackend._lib.RSA_blinding_on = dummy


ap = argparse.ArgumentParser()
ap.add_argument("blockid", help="Blocklist ID")
ap.add_argument("-s", "--source", nargs="?", default=".", help="Source directory")
ap.add_argument("-d", "--dest", nargs="?", default="out", help="Destination directory")
ap.add_argument("-f", "--force", action="store_true", help="delete outdir if it exists")

args = ap.parse_args()

id = int(args.blockid)

if args.force and os.path.exists(args.dest):
    shutil.rmtree(args.dest)

os.mkdir(args.dest)
fs = open(f"{args.dest}/rsa-{id}-short.txt", "w")
fl = open(f"{args.dest}/rsa-{id}-long.txt", "w")
fes = open(f"{args.dest}/ec-{id}-short.txt", "w")
fel = open(f"{args.dest}/ec-{id}-long.txt", "w")
fds = open(f"{args.dest}/dsa-{id}-short.txt", "w")
fdl = open(f"{args.dest}/dsa-{id}-long.txt", "w")
fdhs = open(f"{args.dest}/dh-{id}-short.txt", "w")
fdhl = open(f"{args.dest}/dh-{id}-long.txt", "w")
flog = open(f"{args.dest}/blocklist.log", "w")

for root, dirs, files in os.walk(args.source, followlinks=True):
    if root.endswith(".git"):
        print("skipping .git")
        del dirs[:]
        continue
    sroot = root.removeprefix(args.source).removeprefix("/")
    print(f"processing {root}")
    for fn in files:
        if sroot == "":
            fpath = f"{fn}"
        else:
            fpath = f"{sroot}/{fn}"
        with open(f"{root}/{fn}", "rb") as fkey:
            key = fkey.read()
            try:
                privkey = serialization.load_pem_private_key(
                    key, password=None, backend=mybackend
                )
            except TypeError:  # no password
                flog.write(f"{root}/{fn} pem no password\n")
                continue
            except cryptography.exceptions.UnsupportedAlgorithm:  # e.g. PSS
                flog.write(f"{root}/{fn} pem unsupported algorithm\n")
                continue
            except NotImplementedError:  # strange EC curves
                flog.write(f"{root}/{fn} pem not implemented\n")
                continue
            except (ValueError, OverflowError):
                privkey = False
                pass

            if isinstance(privkey, rsa.RSAPrivateKey):
                rsa_n = privkey.public_key().public_numbers().n
                s256 = hashnumber(rsa_n)
                writehash(id, s256, fpath, fs, fl)

            elif isinstance(privkey, ec.EllipticCurvePrivateKey):
                try:
                    ec_x = privkey.public_key().public_numbers().x
                    s256 = hashnumber(ec_x)
                    writehash(id, s256, fpath, fes, fel)
                except cryptography.exceptions.InternalError:
                    # happens with point at infinity test key
                    flog.write(f"{root}/{fn} internal error ecdsa\n")
                    pass

            elif (
                isinstance(privkey, ed25519.Ed25519PrivateKey)
                or isinstance(privkey, x25519.X25519PrivateKey)
                or isinstance(privkey, x448.X448PrivateKey)
                or isinstance(privkey, ed448.Ed448PrivateKey)
            ):
                try:
                    # "raw" ed25519 keys are simply the x coordinate
                    ec_xb = privkey.public_key().public_bytes(
                        encoding=serialization.Encoding.Raw,
                        format=serialization.PublicFormat.Raw,
                    )
                    ec_x = int.from_bytes(ec_xb, byteorder="big")
                    s256 = hashnumber(ec_x)
                    writehash(id, s256, fpath, fes, fel)
                except cryptography.exceptions.InternalError:
                    # happens with point at infinity test key
                    flog.write(f"{root}/{fn} internal error ed\n")
                    pass

            elif isinstance(privkey, dsa.DSAPrivateKey):
                pub = privkey.public_key()
                dsa_y = pub.public_numbers().y
                s256 = hashnumber(dsa_y)
                writehash(id, s256, fpath, fds, fdl)

            elif isinstance(privkey, dh.DHPrivateKey):
                pub = privkey.public_key()
                try:
                    dh_y = pub.public_numbers().y
                    s256 = hashnumber(dh_y)
                    writehash(id, s256, fpath, fdhs, fdhl)
                except ValueError:
                    # happens with implausibly small parameters
                    pass

            elif privkey is not False:
                flog.write(f"{root}/{fn} unknown type {type(privkey)}\n")
                print(f"{root}/{fn} unknown type {type(privkey)}")


fs.close()
fl.close()
flog.close()
fes.close()
fel.close()
fds.close()
fdl.close()
