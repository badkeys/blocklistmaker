#!/usr/bin/python3

import argparse
import hashlib
import json
import os
import pathlib
import shutil

import cryptography
from cryptography.hazmat import backends
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, dsa, ec, dh
from cryptography.hazmat.primitives.asymmetric import ed25519, x25519, x448, ed448


def hashnumber(i):
    i_bin = i.to_bytes((i.bit_length() + 7) // 8, byteorder="big")
    return hashlib.sha256(i_bin).hexdigest()[:30]


def dummy(_a, _b):
    return 1


def makebl(blid, source, dest, fileext):
    os.mkdir(dest)
    flog = open(f"{dest}/blocklist.log", "w", encoding="ascii")

    keys = {}
    for root, dirs, files in os.walk(source, followlinks=True):
        if root.endswith(".git"):
            print("skipping .git")
            del dirs[:]
            continue
        sroot = root.removeprefix(source).removeprefix("/")
        print(f"processing {root}")
        for fn in files:
            if not fn.endswith(fileext):
                continue
            if sroot == "":
                fpath = f"{fn}"
            else:
                fpath = f"{sroot}/{fn}"
            key = pathlib.Path(f"{root}/{fn}").read_bytes()
            try:
                privkey = serialization.load_pem_private_key(
                    key,
                    password=None,
                    backend=mybackend,
                    unsafe_skip_rsa_key_validation=True,
                )
            except TypeError:  # no password
                flog.write(f"{root}/{fn} pem no password\n")
                continue
            except cryptography.exceptions.UnsupportedAlgorithm:  # e.g. PSS
                flog.write(f"{root}/{fn} pem unsupported algorithm\n")
                continue
            except ValueError:
                continue

            pubkey = privkey.public_key()

            if isinstance(pubkey, rsa.RSAPublicKey):
                hval = pubkey.public_numbers().n

            elif isinstance(pubkey, ec.EllipticCurvePublicKey):
                hval = pubkey.public_numbers().x

            elif isinstance(pubkey, (ed25519.Ed25519PublicKey, x25519.X25519PublicKey,
                            x448.X448PublicKey, ed448.Ed448PublicKey)):
                # "raw" ed25519 keys are simply the x coordinate
                ec_xb = pubkey.public_bytes(
                    encoding=serialization.Encoding.Raw,
                    format=serialization.PublicFormat.Raw
                )
                hval = int.from_bytes(ec_xb, byteorder="big")

            elif isinstance(pubkey, (dsa.DSAPublicKey, dh.DHPublicKey)):
                try:
                    hval = pubkey.public_numbers().y
                except ValueError:
                    # happens with implausibly small parameters
                    pass

            else:
                flog.write(f"{root}/{fn} unknown type {type(pubkey)}\n")
                print(f"{root}/{fn} unknown type {type(pubkey)}")
                continue

            s256 = hashnumber(hval)
            keys[s256] = [blid, fpath]

    fs = open(f"{dest}/keys-{blid}-short.txt", "w", encoding="ascii")
    fl = open(f"{dest}/keys-{blid}-long.txt", "w", encoding="ascii")

    for k in sorted(keys):
        fs.write(f"{k}{keys[k][0]:02x}\n")
        fl.write(f"{k[0:16]};{keys[k][1]}\n")

    fs.close()
    fl.close()
    flog.close()

    with open(f"{dest}/keys-{blid}.json", "w", encoding="ascii") as fj:
        json.dump(keys, fj)


mybackend = backends.default_backend()

# Replace slow RSA_blinding_on with dummy function
mybackend._lib.RSA_blinding_on = dummy


ap = argparse.ArgumentParser()
ap.add_argument("blockid", help="Blocklist ID")
ap.add_argument("-s", "--source", nargs="?", default=".", help="Source directory")
ap.add_argument("-d", "--dest", nargs="?", default="out", help="Destination directory")
ap.add_argument("-f", "--force", action="store_true", help="delete outdir if it exists")
ap.add_argument("--fileext", default=".key", help="Key file extension (default .key)")

args = ap.parse_args()

if args.force and os.path.exists(args.dest):
    shutil.rmtree(args.dest)

makebl(int(args.blockid), args.source, args.dest, args.fileext)
